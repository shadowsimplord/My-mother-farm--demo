import { TreeInfo } from '../../types';
import { CornPlantConfig } from './corn';
import { CoffeePlantConfig } from './coffee';

/**
 * ƒê·ªãnh nghƒ©a interface cho c·∫•u h√¨nh c√¢y tr·ªìng
 */
export interface PlantConfig {
  type: string;
  label: string;
  icon: string;
  color: string;
  basePrice: number;
  growthStages?: Record<string, {
    days: number;
    yieldPercentage: number;
    statusText: string;
  }>;
  properties?: Record<string, string | number | boolean>;
  renderDetails: (plant: TreeInfo) => React.ReactNode | { __html: string };
}

/**
 * ƒê·ªãnh nghƒ©a type cho registry v·ªõi index signature ƒë·ªÉ tƒÉng t√≠nh an to√†n
 */
export type PlantRegistryType = {
  [key: string]: PlantConfig;
};

/**
 * Plant Registry - ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c lo·∫°i c√¢y trong h·ªá th·ªëng
 * D·ªÖ d√†ng th√™m lo·∫°i c√¢y m·ªõi b·∫±ng c√°ch import v√† th√™m v√†o ƒë√¢y
 */
export const PlantRegistry: PlantRegistryType = {
  corn: CornPlantConfig,
  coffee: CoffeePlantConfig,
  // Th√™m c√°c lo·∫°i c√¢y m·ªõi ·ªü ƒë√¢y, v√≠ d·ª•:
  // cherry: CherryPlantConfig,
  // apple: ApplePlantConfig, 
  // orange: OrangePlantConfig,
  // ...v√† nhi·ªÅu lo·∫°i c√¢y kh√°c
};

/**
 * L·∫•y th√¥ng tin c·∫•u h√¨nh c·ªßa m·ªôt lo·∫°i c√¢y theo t√™n
 */
export const getPlantConfig = (type: string): PlantConfig => {
  if (!type || !PlantRegistry[type.toLowerCase()]) {
    // Tr·∫£ v·ªÅ c·∫•u h√¨nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y lo·∫°i c√¢y
    return {
      type: 'unknown',
      label: 'C√¢y Kh√¥ng X√°c ƒê·ªãnh',
      icon: 'üå±',
      color: '#4caf50',
      basePrice: 5,
      renderDetails: () => null
    };
  }
  
  return PlantRegistry[type.toLowerCase()];
};
